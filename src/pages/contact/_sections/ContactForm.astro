---
import { z } from 'astro:content';

// Form validation schema
const ContactFormSchema = z.object({
	name: z
		.string()
		.min(2, { message: 'Name must be at least 2 characters long' })
		.max(50, { message: 'Name must be no more than 50 characters long' })
		.regex(/^[a-zA-Z\s'-]+$/, {
			message:
				'Name can only contain letters, spaces, hyphens, and apostrophes',
		}),

	email: z.string().email({ message: 'Please enter a valid email address' }),

	phone: z
		.string()
		.optional()
		.refine(
			(val) =>
				val === undefined || /^\+?1?\d{10,14}$/.test(val.replace(/\D/g, '')),
			{
				message: 'Please enter a valid phone number',
			}
		),

	package: z.enum(['lump-sum', 'monthly', 'e-commerce'], {
		errorMap: () => ({ message: 'Please select a package type' }),
	}),

	message: z
		.string()
		.min(10, { message: 'Message must be at least 10 characters long' })
		.max(500, { message: 'Message must be no more than 500 characters long' }),
});

type ContactFormData = z.infer<typeof ContactFormSchema>;

import SelectInput from './components/SelectInput.astro';

const options = [
	{ value: 'lump-sum', label: 'Lump Sum' },
	{ value: 'monthly', label: 'Monthly' },
	{ value: 'e-commerce', label: 'E-commerce' },
];
---

<div
	class="flex flex-col gap-10 mx-w-full md:max-w-3/4 lg:max-w-xl mx-auto bg-light-permanent p-10 rounded-xl shadow-md"
>
	<div class="flex flex-col gap-4">
		<div class="wrapper">
			<span
				class="text-topper font-bold tracking-wide uppercase text-primary-orange font-secondary"
				>contact us</span
			>
			<h2 class="text-5xl font-bold text-primary mb-2">Get in touch</h2>
		</div>
		<p class="text-gray-600">
			Fill out the form below and we'll get back to you as soon as possible..
		</p>
	</div>

	<form
		id="contact-form"
		method="POST"
		class="space-y-8"
		x-data="contactForm()"
		@submit.prevent="submitForm"
	>
		<div>
			<label
				for="name"
				class="block text-sm font-medium text-contrast-permanent/80 mb-2"
			>
				Full Name <span class="text-primary-red">*</span>
			</label>
			<input
				type="text"
				id="name"
				name="name"
				required
				minlength="2"
				maxlength="50"
				class="w-full px-4 py-3 bg-white rounded-md focus:outline-none focus:ring-2 focus:ring-contrast-permanent"
				x-model="formData.name"
				x-on:blur="validateField('name')"
				placeholder="Name"
			/>
			<p
				x-show="errors.name"
				x-text="errors.name"
				class="text-red-500 text-sm mt-1"
			>
			</p>
		</div>

		<div>
			<label
				for="email"
				class="block text-sm font-medium text-gray-700 mb-2"
			>
				Email Address <span class="text-red-500">*</span>
			</label>
			<input
				type="email"
				id="email"
				name="email"
				required
				class="w-full px-4 py-3 bg-white rounded-md focus:outline-none focus:ring-2 focus:ring-contrast-permanent"
				x-model="formData.email"
				x-on:blur="validateField('email')"
				placeholder="Email"
			/>
			<p
				x-show="errors.email"
				x-text="errors.email"
				class="text-red-500 text-sm mt-1"
			>
			</p>
		</div>

		<div>
			<label
				for="phone"
				class="block text-sm font-medium text-gray-700 mb-2"
			>
				Phone Number (Optional)
			</label>
			<input
				type="tel"
				id="phone"
				name="phone"
				class="w-full px-4 py-3 bg-white rounded-md focus:outline-none focus:ring-2 focus:ring-contrast-permanent"
				x-model="formData.phone"
				x-on:blur="validateField('phone')"
				placeholder="Phone Number"
			/>
			<p
				x-show="errors.phone"
				x-text="errors.phone"
				class="text-red-500 text-sm mt-1"
			>
			</p>
		</div>

		<div>
			<label
				for="package"
				class="block text-sm font-medium text-gray-700 mb-2"
			>
				Service Package <span class="text-red-500">*</span>
			</label>
			<div class="relative w-full">
				<SelectInput
					options={options}
					name="package"
					placeholder="Choose an option"
				/>
			</div>

			<p
				x-show="errors.package"
				x-text="errors.package"
				class="text-red-500 text-sm mt-1"
			>
			</p>
		</div>

		<div>
			<label
				for="message"
				class="block text-body font-medium text-gray-700 mb-2"
			>
				Your Message <span class="text-red-500">*</span>
			</label>
			<textarea
				id="message"
				name="message"
				required
				minlength="10"
				maxlength="500"
				rows="4"
				class="w-full px-4 py-3 bg-white rounded-md focus:outline-none focus:ring-2 focus:ring-contrast-permanent text-body"
				x-model="formData.message"
				x-on:blur="validateField('message')"
			></textarea>
			<p
				x-show="errors.message"
				x-text="errors.message"
				class="text-red-500 text-sm mt-1"
			>
			</p>
		</div>

		<div>
			<button
				type="submit"
				class="w-fit bg-primary-blue text-white rounded-full hover:bg-primary-orange transition-colors duration-300 px-6 py-3"
				:disabled="!isFormValid"
			>
				Send Message
			</button>
		</div>
	</form>

	<script is:inline define:vars={{ options }}>
		// Validation schema replication for client-side
		const createZodSchema = () => {
			return {
				name: (val) => {
					if (val.length < 2) return 'Name must be at least 2 characters long';
					if (val.length > 50)
						return 'Name must be no more than 50 characters long';
					if (!/^[a-zA-Z\s'-]+$/.test(val))
						return 'Name can only contain letters, spaces, hyphens, and apostrophes';
					return null;
				},
				email: (val) => {
					const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
					return !emailRegex.test(val)
						? 'Please enter a valid email address'
						: null;
				},
				phone: (val) => {
					if (!val) return null;
					const cleanedPhone = val.replace(/\D/g, '');
					return cleanedPhone.length < 10 || cleanedPhone.length > 14
						? 'Please enter a valid phone number'
						: null;
				},
				package: (val) => {
					const validPackages = ['lump-sum', 'monthly', 'e-commerce'];
					return !validPackages.includes(val)
						? 'Please select a package type'
						: null;
				},
				message: (val) => {
					if (val.length < 10)
						return 'Message must be at least 10 characters long';
					if (val.length > 500)
						return 'Message must be no more than 500 characters long';
					return null;
				},
			};
		};

		function contactForm() {
			const zodSchema = createZodSchema();

			return {
				formData: {
					name: '',
					email: '',
					phone: '',
					package: '',
					message: '',
				},
				errors: {},
				isFormValid: false,

				validateField(field) {
					const validate = zodSchema[field];
					const error = validate(this.formData[field]);
					this.errors[field] = error;
					this.checkFormValidity();
				},

				checkFormValidity() {
					this.isFormValid = Object.keys(this.formData).every((field) => {
						if (field === 'phone') return true; // phone is optional
						const validate = zodSchema[field];
						return !validate(this.formData[field]);
					});
				},

				async submitForm() {
					// Existing submission logic remains the same
					if (this.isFormValid) {
						try {
							const response = await fetch('/api/submit-contact', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify(this.formData),
							});

							if (response.ok) {
								alert('Message sent successfully!');
								this.resetForm();
							} else {
								alert('Failed to send message. Please try again.');
							}
						} catch (error) {
							console.error('Submission error:', error);
							alert('An error occurred. Please try again.');
						}
					}
				},

				resetForm() {
					this.formData = {
						name: '',
						email: '',
						phone: '',
						package: '',
						message: '',
					};
					this.errors = {};
					this.isFormValid = false;
				},
			};
		}
	</script>
</div>
